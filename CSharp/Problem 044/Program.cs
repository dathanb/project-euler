using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;

namespace Problem_044
{
    /// <summary>
    /// Project Euler
    /// Problem 44
    /// Pentagonal numbers are generated by the formula, Pn=n(3n-1)/2. The first ten pentagonal numbers are:
    /// 
    /// 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
    /// 
    /// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 22 = 48, is not pentagonal.
    /// 
    /// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference is pentagonal and D = |Pk Pj| is minimised; what is the value of D?
    /// </summary>
    /// <remarks>
    /// Note that n(3n-1)/2 = 3/2 n^2 -1/2 n.  Therefore, finding out if a number P is pentagonal is equivalent to finding whether the 
    /// quadratic equation 3/2 n^2 - 1/2 n - P = 0 has a natural number solution.
    /// </remarks>
    class Program
    {
        static Hashtable ht;
        static void Main(string[] args)
        {
            Int64 min = 1000000000000;
            int min_index_diff = 1000000000;

            // calculate a list of pentagonal numbers
            ht = new Hashtable();
            for (int j = 1; j < 1000000; ++j)
            {
                ht.Add(pentagonal(j), j);
            }

            foreach (DictionaryEntry pj in ht)
            {
                foreach (DictionaryEntry pk in ht)
                {
                    if (pj.Value == pk.Value)
                        continue;

                    //if (isPentagonal(
                }
            }

            Console.Out.WriteLine(min);
            Console.Out.WriteLine(min_index_diff);

        }

        static bool isPentagonal(Int64 p)
        {
            const double a = 1.5;
            const double b = -0.5;
            double c = -p;
            // quadratic equation : n = {(-b + sqrt(b^2-4ac))/2a, (-b - sqrt(b^2-4ac))/2a}
            // only need to evaluate one direction: the plus version will be integral
            // if and only if the minus version is as well
            double val = (-b + Math.Sqrt(b * b - 4 * a * c)) / (2 * a);
            return (Math.Truncate(val) == val);
        }

        static Int64 pentagonal(int n)
        {
            return n * (3 * n - 1) / 2;
        }
    }
}
