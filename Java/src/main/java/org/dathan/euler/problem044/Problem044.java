package org.dathan.euler.problem044;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/*
Pentagonal numbers are generated by the formula, Pn=n(3n1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70  22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference is pentagonal and D = |Pk  Pj| is minimised; what is the value of D?
 */
 
 /*
 FIXME: While this yields the correct answer, it's not a correct implementation, because it's not guaranteed to return the 
 pair with the smallest difference first; I just got lucky.
 */

public class Problem044 {
	private Set<Long> pentagonalNumberSet = new HashSet<Long>();
	private List<Long> pentagonalNumberList = new ArrayList<Long>();
	
	public static void main(String[] args) {
		new Problem044().run();
	}
	
	private void run() {
		for (int counter=2; ; ++counter) {
			for (int other = counter-1; other>0; --other) {
				long pentagonalA = getPentagonal(counter);
				long pentagonalB = getPentagonal(other);
				long sum = pentagonalA + pentagonalB;
				long difference = pentagonalA - pentagonalB;
				fillPentagonalsUpTo(sum);
				if (isPentagonal(sum) && isPentagonal(difference)) {
					System.out.println(difference);
					System.exit(0);
				}
			}
		}
	}
	
	private long getPentagonal(int index) {
		if (index < pentagonalNumberList.size()) {
			return pentagonalNumberList.get(index-1);
		}
		return index * ( 3 * index - 1) / 2;
	}
	
	private void fillPentagonalsUpTo(long value) {
		if ((pentagonalNumberList.size() > 0) && (pentagonalNumberList.get(pentagonalNumberList.size()-1) >= value))
			return;

		long pentagonal = 0;
		int i = pentagonalNumberList.size();
		do {
			++i;
			pentagonal = i * ( 3 * i - 1) / 2;
			pentagonalNumberSet.add(pentagonal);
			pentagonalNumberList.add(pentagonal);
		} while (pentagonal < value);
	}
	
	private boolean isPentagonal(long value) {
		return pentagonalNumberSet.contains(value);
	}
}
