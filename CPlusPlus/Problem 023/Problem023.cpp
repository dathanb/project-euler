/*
Project Euler
Problem 23

"A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. 
For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 
28 is a perfect number.

A number whose proper divisors are less than the number is called deficient and a number whose proper 
divisors exceed the number is called abundant.

As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written 
as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers 
greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot 
be reduced any further by analysis even though it is known that the greatest number that cannot be 
expressed as the sum of two abundant numbers is less than this limit.

Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers."
*/

#include <iostream>
#include <vector>

const int MAX = 28124;

int
main ()
{
	// calculate the abundant numbers less than 28123
	std::cout << "Calculating abundant numbers" << std::endl;
	std::vector<int> num_vec;
	for (int i=1; i<MAX; ++i)
	{
		int total = 1;
		for (int j=2; j<=i/2; ++j)
		{
			if (i % j == 0)
			{
				total += j;
			}
		}
		if (total > i)
			num_vec.push_back(i);
	}

	// and now move them to a dynamic array for faster access
	int *nums = new int[num_vec.size()];
	int num_nums = num_vec.size();
	for (int i=0; i<num_nums; ++i)
	{
		nums[i] = num_vec[i];
	}

	// now that we've calculated those abundant numbers, calculate all numbers that can be
	// calculated as the sum of them
	std::cout << "Calculating numbers that can be represented by two abundant numbers" << std::endl;
	char sum[MAX] = {0};
	for (int i=0; i<num_nums; ++i)
	{
		std::cout << nums[i] << '\t';
		int j=0;
		while ((j < num_nums) && (nums[i] + nums[j] <= 28123))
		{
			if (nums[i] + nums[j] < MAX)
				sum[nums[i] + nums[j]] = 1;
			++j;
		}
	}
	std::cout << std::endl;

	// now go through that list and add together all the ones that weren't generated by addition
	std::cout << "Calculating sum" << std::endl;
	int total = 0;
	for (int i=0; i<MAX; ++i)
	{
		if (sum[i] != 1)
			total += i;
	}

	// and display it
	std::cout << total << std::endl;
	return 0;
}
