/*
Project Euler
Problem 012
"The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that the 7th triangle number, 28, is the first triangle number to have over five divisors.

Which is the first triangle number to have over five-hundred divisors?"
*/

/*
This would be significantly more efficient, I think, if a combinatoric method of calculating the number of divisors of a number based
on the prime factorization of that number could be developed.  It's much faster to develop a prime factorization of a number than
to try every value less than that number.
*/

#include <iostream>
#include <vector>

int
countDivisors(int num)
{
	int count=0;
	for (int n = 1; n<=num/2; ++n)
	{
		if (num % n == 0)
		{
			++count;
			if (count >500)
				return count;
		}
	}
	return count;
}


int
main (void)
{
	int i;
	int maxdivs=0;
	int divs;
	long num=1;
	for (i=1; ; num+=(++i))
	{
		divs = countDivisors(num);
		if (divs > maxdivs)
		{
			maxdivs = divs;
			std::cout << num << '\t' << divs << std::endl;
		}
		if (divs > 500)
			break;
	}

	std::cout << i << std::endl;
	return 0;
}
